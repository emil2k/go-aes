package state

import (
	"bytes"
	"testing"
)

func TestStateSub(t *testing.T) {
	s := State([]byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c})
	out := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	if s.Sub(); !bytes.Equal(s, out) {
		t.Errorf("State substitution failed with %v", &s)
	}
}

func TestStateInvSub(t *testing.T) {
	s := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	out := State([]byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c})
	if s.InvSub(); !bytes.Equal(s, out) {
		t.Errorf("State substitution failed with %v", &s)
	}
}

func TestStateShift(t *testing.T) {
	s := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	out := State([]byte{0xf1, 0xe4, 0x59, 0xeb, 0x34, 0x68, 0x84, 0x47, 0x62, 0x8a, 0x59, 0x24, 0x01, 0xf3, 0xb5, 0xc4})
	if s.Shift(); !bytes.Equal(s, out) {
		t.Errorf("State shift failed with \n%v\nExpected:\n%v", &s, &out)
	}
}

func TestStateInvShift(t *testing.T) {
	s := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	out := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	s.Shift()
	if s.InvShift(); !bytes.Equal(s, out) {
		t.Errorf("State inverse shift failed with \n%v\nExpected:\n%v", &s, &out)
	}
}

func TestStateGetRow(t *testing.T) {
	s := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	row := []byte{0xf3, 0xe4, 0x68, 0x8a}
	if out := s.GetRow(1); !bytes.Equal(row, out) {
		t.Errorf("Get row failed with %v", out)
	}
}

func TestStateSetRow(t *testing.T) {
	row := []byte{0x00, 0x01, 0x02, 0x03}
	s := State([]byte{0xf1, 0xf3, 0x59, 0x47, 0x34, 0xe4, 0xb5, 0x24, 0x62, 0x68, 0x59, 0xc4, 0x01, 0x8a, 0x84, 0xeb})
	out := State([]byte{0xf1, 0x00, 0x59, 0x47, 0x34, 0x01, 0xb5, 0x24, 0x62, 0x02, 0x59, 0xc4, 0x01, 0x03, 0x84, 0xeb})
	if s.SetRow(1, &row); !bytes.Equal(s, out) {
		t.Errorf("Set row failed with \n%v\nExpected:\n%v", &s, &out)
	}
}
